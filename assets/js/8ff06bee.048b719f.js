"use strict";(self.webpackChunkkuberocketci_docs=self.webpackChunkkuberocketci_docs||[]).push([[94185],{11470:(e,n,a)=>{a.d(n,{A:()=>S});var r=a(96540),s=a(34164),t=a(23104),o=a(56347),c=a(205),i=a(57485),l=a(31682),u=a(70679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((({props:{value:e,label:n,attributes:a,default:r}})=>({value:e,label:n,attributes:a,default:r})))}(a);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function A({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const a=(0,o.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,i.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function h(e){const{defaultValue:n,queryString:a=!1,groupId:s}=e,t=p(e),[o,i]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!A({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:t}))),[l,d]=m({queryString:a,groupId:s}),[h,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,s]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),v=(()=>{const e=l??h;return A({value:e,tabValues:t})?e:null})();(0,c.A)((()=>{v&&i(v)}),[v]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!A({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),g(e)}),[d,g,t]),tabValues:t}}var g=a(92303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=a(74848);function x({className:e,block:n,selectedValue:a,selectValue:r,tabValues:o}){const c=[],{blockElementScrollPositionUntilNextRender:i}=(0,t.a_)(),l=e=>{const n=e.currentTarget,s=c.indexOf(n),t=o[s].value;t!==a&&(i(n),r(t))},u=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:o.map((({value:e,label:n,attributes:r})=>(0,_.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{c.push(e)},onKeyDown:u,onClick:l,...r,className:(0,s.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":a===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:a}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function f(e){const n=h(e);return(0,_.jsxs)("div",{className:(0,s.A)("tabs-container",v.tabList),children:[(0,_.jsx)(x,{...n,...e}),(0,_.jsx)(b,{...n,...e})]})}function S(e){const n=(0,g.A)();return(0,_.jsx)(f,{...e,children:d(e.children)},String(n))}},19365:(e,n,a)=>{a.d(n,{A:()=>o});a(96540);var r=a(34164);const s={tabItem:"tabItem_Ymn6"};var t=a(74848);function o({children:e,hidden:n,className:a}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,a),hidden:n,children:e})}},24356:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>A,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"operator-guide/cd/deploy-application-in-remote-cluster-via-irsa","title":"Deploy Application In Remote Cluster via IRSA","description":"Learn how to securely deploy applications across AWS accounts using IRSA (IAM Roles for Service Accounts) in KubeRocketCI. Step-by-step guide for EKS cross-account access configuration.","source":"@site/docs/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa.md","sourceDirName":"operator-guide/cd","slug":"/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa","permalink":"/docs/next/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa","draft":false,"unlisted":false,"editUrl":"https://github.com/KubeRocketCI/docs/edit/main/docs/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa.md","tags":[],"version":"current","lastUpdatedBy":"Oleksandr_Stepanov@epam.com","lastUpdatedAt":1748673789000,"frontMatter":{"title":"Deploy Application In Remote Cluster via IRSA","sidebar_label":"Deploy Application In Remote Cluster via IRSA","description":"Learn how to securely deploy applications across AWS accounts using IRSA (IAM Roles for Service Accounts) in KubeRocketCI. Step-by-step guide for EKS cross-account access configuration."},"sidebar":"operatorGuideSidebar","previous":{"title":"Deploy RPM Packages","permalink":"/docs/next/operator-guide/cd/deploy-rpm"},"next":{"title":"Deploy Application In Remote Cluster via Token","permalink":"/docs/next/operator-guide/cd/deploy-application-in-remote-cluster-via-token"}}');var s=a(74848),t=a(28453),o=a(11470),c=a(19365);const i={title:"Deploy Application In Remote Cluster via IRSA",sidebar_label:"Deploy Application In Remote Cluster via IRSA",description:"Learn how to securely deploy applications across AWS accounts using IRSA (IAM Roles for Service Accounts) in KubeRocketCI. Step-by-step guide for EKS cross-account access configuration."},l="Deploy Application In Remote Cluster via IRSA",u={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Roles",id:"roles",level:2},{value:"Required IAM Roles and Policies for KRCI",id:"required-iam-roles-and-policies-for-krci",level:3},{value:"Required IAM Roles and Policies for Argo CD Cross-Account Deployment",id:"required-iam-roles-and-policies-for-argo-cd-cross-account-deployment",level:3},{value:"Add Annotations to Service Accounts (Account A)",id:"add-annotations-to-service-accounts-account-a",level:2},{value:"CD-Pipeline-Operator Service Account (Account A)",id:"cd-pipeline-operator-service-account-account-a",level:3},{value:"Annotate Service Accounts in Kubernetes (Account A)",id:"annotate-service-accounts-in-kubernetes-account-a",level:3},{value:"Define Argo CD Project for Remote Clusters (Account A)",id:"define-argo-cd-project-for-remote-clusters-account-a",level:2},{value:"Update aws_auth ConfigMap in Target Cluster (Account B)",id:"update-aws_auth-configmap-in-target-cluster-account-b",level:2},{value:"Create ClusterRole and ClusterRoleBinding (Account B)",id:"create-clusterrole-and-clusterrolebinding-account-b",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Articles",id:"related-articles",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r,Head:i}=n;return r||m("Details",!0),i||m("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"deploy-application-in-remote-cluster-via-irsa",children:"Deploy Application In Remote Cluster via IRSA"})}),"\n",(0,s.jsx)(i,{children:(0,s.jsx)("link",{rel:"canonical",href:"https://docs.kuberocketci.io/docs/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa"})}),"\n",(0,s.jsx)(n.p,{children:"KubeRocketCI provides the capability to deploy applications securely using IAM Roles for Service Accounts (IRSA) in AWS EKS.\nThis integration enables Kubernetes pods to assume IAM roles for secure and temporary access to AWS resources, eliminating the need for long-lived credentials. While the deployment process is streamlined for most users, the platform also supports advanced configurations for custom permissions and role management, ensuring flexibility for more complex scenarios."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["To start using this approach, you need to have OIDC (OpenID Connect) already configured for your EKS cluster. This setup allows Kubernetes service accounts to securely assume IAM roles. For your convenience, please follow our documentation ",(0,s.jsx)(n.a,{href:"/docs/next/operator-guide/auth/configure-keycloak-oidc-eks",children:"EKS OIDC With Keycloak"}),". This setup seamlessly integrates OIDC with minimal effort."]}),"\n",(0,s.jsx)(n.h2,{id:"roles",children:"Roles"}),"\n",(0,s.jsx)(n.p,{children:"Cross-account interaction is performed through IRSA with a two-tiered IAM role setup:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In AWS Account A, the EKS cluster runs a kuberocketci cd-pipeline-operator with service account."}),"\n",(0,s.jsxs)(n.li,{children:["This service account obtains temporary credentials through IRSA, which are associated with the ",(0,s.jsx)(n.code,{children:"AWSIRSA_\\{cluster_name\\}_CDPipelineOperator"})," role."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AWSIRSA_\\{cluster_name\\}_CDPipelineOperator"})," can then assume the ",(0,s.jsx)(n.code,{children:"AWSIRSA_\\{cluster_name\\}_CDPipelineAgent"})," role in AWS Account B."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"AWSIRSA_\\{cluster_name\\}_CDPipelineAgent"})," configures the environment (Stage) by creating namespaces, generating service accounts, copying secrets, and preparing for deployment."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"required-iam-roles-and-policies-for-krci",children:"Required IAM Roles and Policies for KRCI"}),"\n",(0,s.jsx)(n.p,{children:"Below is a Trust Policy for the initial IRSA role that the service account assumes:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_CDPipelineOperator (AWS Account A)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "Federated": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:oidc-provider/oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE"\n            },\n            "Action": "sts:AssumeRoleWithWebIdentity",\n            "Condition": {\n                "StringEquals": {\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:sub": [\n                        "system:serviceaccount:krci:edp-cd-pipeline-operator"\n                    ]\n                }\n            }\n        },\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:AWSIRSA_{cluster_name}_CDPipelineOperator"\n            },\n            "Action": "sts:AssumeRole",\n            "Condition": {}\n        }\n    ]\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"Below is a Policy that allows assuming roles in Account B:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_CDPipelineAssume (AWS Account A)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Effect": "Allow",\n      "Action": "sts:AssumeRole",\n      "Resource": "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_CDPipelineAgent"\n    }\n  ]\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"Below is a Trust Policy that allows to control access to Account B resources:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_CDPipelineAgent (AWS Account B)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Action": "sts:AssumeRole",\n            "Resource": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n        }\n    ]\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"Below is a Policy that defines permissions for deployments:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_CDPipelineClusterAccess (AWS Account B)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Effect": "Allow",\n      "Action": [\n        "eks:DescribeCluster",\n        "eks:ListClusters",\n        "eks:AccessKubernetesApi"\n      ],\n      "Resource": "arn:aws:eks:<AWS_REGION>:<AWS_ACCOUNT_B_ID>:cluster/<cluster-name>"\n    }\n  ]\n}\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"required-iam-roles-and-policies-for-argo-cd-cross-account-deployment",children:"Required IAM Roles and Policies for Argo CD Cross-Account Deployment"}),"\n",(0,s.jsx)(n.p,{children:"This section outlines the necessary IAM roles and policies required for Argo CD to manage Kubernetes clusters across AWS accounts securely. The setup follows AWS best practices by using IAM Roles for Service Accounts (IRSA) and cross-account access to limit privileges effectively."}),"\n",(0,s.jsx)(n.p,{children:"This IAM role is used by Argo CD to authenticate via OIDC and assume required permissions:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Argo CD IRSA access model",src:a(70437).A+"",title:"Argo CD IRSA access model",width:"952",height:"362"})}),"\n",(0,s.jsx)(n.p,{children:"IAM Policy for AWSIRSA_{cluster_name}_ArgoCDMaster:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_ArgoCDMaster (AWS Account A)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "Statement": [\n        {\n            "Action": "sts:AssumeRole",\n            "Effect": "Allow",\n            "Resource": [\n                "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_ArgoCDAgentAccess"\n            ]\n        }\n    ],\n    "Version": "2012-10-17"\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"Trust Relationship for AWSIRSA_{cluster_name}_ArgoCDMaster:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_ArgoCDMasterClusterAccess (AWS Account A)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "Federated": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:oidc-provider/oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE"\n            },\n            "Action": "sts:AssumeRoleWithWebIdentity",\n            "Condition": {\n                "StringLike": {\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:aud": "sts.amazonaws.com",\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:sub": [\n                      "system:serviceaccount:argocd:argocd-application-controller",\n                      "system:serviceaccount:argocd:argocd-applicationset-controller",\n                      "system:serviceaccount:argocd:argocd-server"\n                  ],\n                }\n            }\n        }\n    ]\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"IAM Policy for AWSIRSA_{cluster_name}_ArgoCDAgentAccess:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_ArgoCDAgentAccess (AWS Account B)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Action": [\n                "eks:DescribeCluster",\n                "eks:ListClusters",\n                "eks:AccessKubernetesApi"\n            ],\n            "Resource": "arn:aws:eks:<AWS_REGION>:<AWS_ACCOUNT_B_ID>:cluster/<cluster-name>"\n        }\n    ]\n}\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"Trust Relationship for AWSIRSA_{cluster_name}_ArgoCDAgentAccess:"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: AWSIRSA_{cluster_name}_ArgoCDAssume (AWS Account B)"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Action": "sts:AssumeRole",\n            "Resource": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n        }\n    ]\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"add-annotations-to-service-accounts-account-a",children:"Add Annotations to Service Accounts (Account A)"}),"\n",(0,s.jsx)(n.p,{children:"The next step is to add proper annotations to service accounts to grant permissions defined in the Roles."}),"\n",(0,s.jsx)(n.h3,{id:"cd-pipeline-operator-service-account-account-a",children:"CD-Pipeline-Operator Service Account (Account A)"}),"\n",(0,s.jsx)(n.p,{children:"Add annotations to the Service Account of cd-pipeline-operator:"}),"\n",(0,s.jsxs)(o.A,{defaultValue:"values",values:[{label:"Values.yaml",value:"values"},{label:"CLI",value:"cli"},{label:"Manifests",value:"manifests"}],children:[(0,s.jsxs)(c.A,{value:"values",children:[(0,s.jsxs)(n.p,{children:["Update the ",(0,s.jsx)(n.code,{children:"CD-Pipeline-Operator"})," configuration in ",(0,s.jsx)(n.a,{href:"https://github.com/epam/edp-install/blob/master/deploy-templates/values.yaml",children:"edp-install"})," repository to automatically add annotations to service account:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="deploy-templates/values.yaml"',children:'cd-pipeline-operator:\n  serviceAccount:\n    annotations:\n      eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n'})})]}),(0,s.jsxs)(c.A,{value:"cli",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: edp-cd-pipeline-operator"',children:'kubectl patch serviceaccount edp-cd-pipeline-operator -n krci \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"}}}\'\n'})}),(0,s.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding deployments to ensure new pods are created with the updated IAM roles configuration. Use the following command:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl rollout restart deployment cd-pipeline-operator -n krci\n"})})]}),(0,s.jsxs)(c.A,{value:"manifests",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="ServiceAccount: edp-cd-pipeline-operator"',children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n  name: edp-cd-pipeline-operator\n  namespace: krci\n'})}),(0,s.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding deployments to ensure new pods are created with the updated IAM roles configuration. Use the following command:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl rollout restart deployment cd-pipeline-operator -n krci\n"})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"annotate-service-accounts-in-kubernetes-account-a",children:"Annotate Service Accounts in Kubernetes (Account A)"}),"\n",(0,s.jsx)(n.p,{children:"Annotate the service accounts in the account where Argo CD is located with the corresponding role ARN:"}),"\n",(0,s.jsxs)(o.A,{defaultValue:"values",values:[{label:"Values.yaml",value:"values"},{label:"CLI",value:"cli"},{label:"Manifests",value:"manifests"}],children:[(0,s.jsxs)(c.A,{value:"values",children:[(0,s.jsxs)(n.p,{children:["Update the Argo CD configuration in ",(0,s.jsx)(n.a,{href:"https://github.com/epam/edp-cluster-add-ons/blob/main/clusters/core/addons/argo-cd/values.yaml",children:"Add-Ons"})," repository to automatically add annotations to service accounts:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="clusters/core/addons/argo-cd/values.yaml"',children:'argo-cd:\n  controller:\n    serviceAccount:\n      # -- Annotations applied to created service account\n      annotations:\n        eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n\n  server:\n    serviceAccount:\n      # -- Annotations applied to created service account\n      annotations:\n        eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n\n  applicationSet:\n    serviceAccount:\n      # -- Annotations applied to created service account\n      annotations:\n        eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n\n'})})]}),(0,s.jsxs)(c.A,{value:"cli",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-application-controller"',children:'\nkubectl patch serviceaccount argocd-application-controller -n argocd \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"}}}\'\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-applicationset-controller"',children:'\nkubectl patch serviceaccount argocd-applicationset-controller -n argocd \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"}}}\'\n'})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-server"',children:'\nkubectl patch serviceaccount argocd-server -n argocd \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"}}}\'\n'})}),(0,s.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding workloads to ensure new pods are created with the updated IAM roles configuration. To do this, use the following commands:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl delete pod -l app.kubernetes.io/name=argocd-application-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-applicationset-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-server -n argocd\n"})})]}),(0,s.jsxs)(c.A,{value:"manifests",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="ServiceAccount: argocd service accounts"',children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n  name: argocd-application-controller\n  namespace: argocd\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n  name: argocd-applicationset-controller\n  namespace: argocd\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n  name: argocd-server\n  namespace: argocd\n'})}),(0,s.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding workloads to ensure new pods are created with the updated IAM roles configuration. To do this, use the following commands:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl delete pod -l app.kubernetes.io/name=argocd-application-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-applicationset-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-server -n argocd\n"})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"define-argo-cd-project-for-remote-clusters-account-a",children:"Define Argo CD Project for Remote Clusters (Account A)"}),"\n",(0,s.jsx)(n.p,{children:"Update the Argo CD project to add a new destination for the remote cluster:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: krci\n  namespace: argocd\nspec:\n  destinations:\n    - namespace: krci-*\n      server: https://EXAMPLED539D4633E53DE1B71EXAMPLE.gr7.<AWS_REGION_ACCOUNT_B>.eks.amazonaws.com\n"})}),"\n",(0,s.jsx)(n.h2,{id:"update-aws_auth-configmap-in-target-cluster-account-b",children:"Update aws_auth ConfigMap in Target Cluster (Account B)"}),"\n",(0,s.jsxs)(n.p,{children:["Update the ",(0,s.jsx)(n.strong,{children:"aws_auth"})," ConfigMap in Target Cluster to access and operate in that Target Cluster:"]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"View: aws-auth-configmap.yaml"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n  namespace: kube-system\ndata:\n  mapRoles: |\n    - groups:\n      - "cd-pipeline-operator"\n      rolearn: "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_CDPipelineAgent"\n      username: "eksadminrole"\n    - groups:\n      - "system:masters"\n      rolearn: "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_ArgoCDAgentAccess"\n      username: "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_ArgoCDAgentAccess"\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"create-clusterrole-and-clusterrolebinding-account-b",children:"Create ClusterRole and ClusterRoleBinding (Account B)"}),"\n",(0,s.jsxs)(n.p,{children:["Associate the IAM Role with the ",(0,s.jsx)(n.strong,{children:"cd-pipeline-operator"})," group:"]}),"\n",(0,s.jsxs)(o.A,{defaultValue:"kubernetes",values:[{label:"Kubernetes RBAC",value:"kubernetes"},{label:"Capsule",value:"capsule"}],children:[(0,s.jsx)(c.A,{value:"kubernetes",children:(0,s.jsxs)(o.A,{defaultValue:"kubectl",values:[{label:"kubectl",value:"kubectl"},{label:"Manifests",value:"manifests"}],children:[(0,s.jsx)(c.A,{value:"kubectl",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-application-controller"',children:"kubectl create clusterrole cd-pipeline-rolebinding-access \\\n  --verb=get,list,create,delete \\\n  --resource=rolebindings.rbac.authorization.k8s.io \\\n  --verb=create,get,list \\\n  --resource=secrets \n\n\n\nkubectl create clusterrolebinding cd-pipeline-operator-rolebinding-access \\\n  --clusterrole=cd-pipeline-rolebinding-access \\\n  --group=cd-pipeline-operator\n"})})}),(0,s.jsxs)(c.A,{value:"manifests",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="cd-pipeline-rolebinding-access.yaml"',children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cd-pipeline-rolebinding-access\nrules:\n  - verbs:\n      - get\n      - list\n      - create\n      - delete\n    apiGroups:\n      - rbac.authorization.k8s.io\n    resources:\n      - rolebindings\n  - verbs:\n      - create\n      - get\n      - list\n    apiGroups:\n      - ''\n    resources:\n      - secrets\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="cd-pipeline-operator-rolebinding-access.yaml"',children:"apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cd-pipeline-operator-rolebinding-access\nsubjects:\n  - kind: Group\n    apiGroup: rbac.authorization.k8s.io\n    name: cd-pipeline-operator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cd-pipeline-rolebinding-access\n"})})]})]})}),(0,s.jsxs)(c.A,{value:"capsule",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="Capsule configuration"',children:"apiVersion: capsule.clastix.io/v1beta2\nkind: CapsuleConfiguration\nmetadata:\n  name: default\nspec:\n  userGroups:\n    - capsule.clastix.io\n    - cd-pipeline-operator\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="Tenant configuration"',children:"apiVersion: capsule.clastix.io/v1beta2\nkind: Tenant\nmetadata:\n  name: krci\nspec:\n  owners:\n    - clusterRoles:\n        - admin\n        - capsule-namespace-deleter\n      kind: Group\n      name: cd-pipeline-operator\n"})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["By completing all the steps in this documentation, you will obtain a token for integration with the Kubernetes cluster.\nThe next step is to configure the cluster integration with KubeRocketCI, as described in the documentation ",(0,s.jsx)(n.a,{href:"/docs/next/user-guide/add-cluster",children:"Add Cluster"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"related-articles",children:"Related Articles"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/next/operator-guide/cd/argocd-integration",children:"Argo CD Integration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/next/user-guide/add-cluster",children:"Add Cluster"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/next/user-guide/add-application",children:"Add Application"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/next/user-guide/add-cd-pipeline",children:"Add CD Pipeline"})}),"\n"]})]})}function A(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>c});var r=a(96540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}},70437:(e,n,a)=>{a.d(n,{A:()=>r});const r=a.p+"assets/images/cluster-irsa-argocd-acess-model-67e5a74261aa5884544d7826ea4a2a6d.jpg"}}]);