"use strict";(self.webpackChunkkuberocketci_docs=self.webpackChunkkuberocketci_docs||[]).push([[73694],{9655:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/configure-iam-argo-cd-access-entry-47e31ac3f8b2d8f2ef84f4e5d8d16ad1.png"},11470:(e,n,s)=>{s.d(n,{A:()=>v});var r=s(96540),t=s(34164),a=s(17559),c=s(23104),o=s(56347),i=s(205),l=s(57485),d=s(31682),u=s(70679);function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:s}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:s,default:r}})=>({value:e,label:n,attributes:s,default:r}))}(s);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function A({value:e,tabValues:n}){return n.some(n=>n.value===e)}function g({queryString:e=!1,groupId:n}){const s=(0,o.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(t),(0,r.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(s.location.search);n.set(t,e),s.replace({...s.location,search:n.toString()})},[t,s])]}function m(e){const{defaultValue:n,queryString:s=!1,groupId:t}=e,a=p(e),[c,o]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!A({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a})),[l,d]=g({queryString:s,groupId:t}),[h,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,t]=(0,u.Dv)(n);return[s,(0,r.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),x=(()=>{const e=l??h;return A({value:e,tabValues:a})?e:null})();(0,i.A)(()=>{x&&o(x)},[x]);return{selectedValue:c,selectValue:(0,r.useCallback)(e=>{if(!A({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),m(e)},[d,m,a]),tabValues:a}}var x=s(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(74848);function S({className:e,block:n,selectedValue:s,selectValue:r,tabValues:a}){const o=[],{blockElementScrollPositionUntilNextRender:i}=(0,c.a_)(),l=e=>{const n=e.currentTarget,t=o.indexOf(n),c=a[t].value;c!==s&&(i(n),r(c))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{const s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:r})=>(0,f.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:l,...r,className:(0,t.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function _({lazy:e,children:n,selectedValue:s}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===s);return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function C(e){const n=m(e);return(0,f.jsxs)("div",{className:(0,t.A)(a.G.tabs.container,"tabs-container",j.tabList),children:[(0,f.jsx)(S,{...n,...e}),(0,f.jsx)(_,{...n,...e})]})}function v(e){const n=(0,x.A)();return(0,f.jsx)(C,{...e,children:h(e.children)},String(n))}},19365:(e,n,s)=>{s.d(n,{A:()=>c});s(96540);var r=s(34164);const t={tabItem:"tabItem_Ymn6"};var a=s(74848);function c({children:e,hidden:n,className:s}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,s),hidden:n,children:e})}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var r=s(96540);const t={},a=r.createContext(t);function c(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(a.Provider,{value:n},e.children)}},67301:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/create-access-entry-6c1f630da914e22478e0a9c2c07dc59b.png"},72613:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/configure-iam-access-entry-b02eff7d78676e7a9808a52eb3e066d3.png"},74014:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/add-access-policy-1ff224d9b2097b21d442b2ad0eac8294.png"},88581:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"operator-guide/cd/deploy-application-in-remote-cluster-via-irsa","title":"Deploy Application In Remote Cluster via IRSA","description":"Learn how to securely deploy applications across AWS accounts using IRSA (IAM Roles for Service Accounts) in KubeRocketCI. Step-by-step guide for EKS cross-account access configuration.","source":"@site/versioned_docs/version-3.11/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa.md","sourceDirName":"operator-guide/cd","slug":"/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa","permalink":"/docs/3.11/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa","draft":false,"unlisted":false,"editUrl":"https://github.com/KubeRocketCI/docs/edit/main/docs/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa.md","tags":[],"version":"3.11","lastUpdatedBy":"Daniil Nedostup","lastUpdatedAt":1751264393000,"frontMatter":{"title":"Deploy Application In Remote Cluster via IRSA","sidebar_label":"Deploy Application In Remote Cluster via IRSA","description":"Learn how to securely deploy applications across AWS accounts using IRSA (IAM Roles for Service Accounts) in KubeRocketCI. Step-by-step guide for EKS cross-account access configuration."},"sidebar":"operatorGuideSidebar","previous":{"title":"Deploy RPM Packages","permalink":"/docs/3.11/operator-guide/cd/deploy-rpm"},"next":{"title":"Argo CD Integration","permalink":"/docs/3.11/operator-guide/cd/argocd-integration"}}');var t=s(74848),a=s(28453),c=s(11470),o=s(19365);const i={title:"Deploy Application In Remote Cluster via IRSA",sidebar_label:"Deploy Application In Remote Cluster via IRSA",description:"Learn how to securely deploy applications across AWS accounts using IRSA (IAM Roles for Service Accounts) in KubeRocketCI. Step-by-step guide for EKS cross-account access configuration."},l="Deploy Application In Remote Cluster via IRSA",d={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Architecture and Working Principles",id:"architecture-and-working-principles",level:2},{value:"Create IAM Roles",id:"create-iam-roles",level:2},{value:"Using AWS Management Console",id:"using-aws-management-console",level:3},{value:"Using Terraform and AWS Management Console",id:"using-terraform-and-aws-management-console",level:3},{value:"Annotate Service Accounts",id:"annotate-service-accounts",level:2},{value:"CD Pipeline Operator Service Account",id:"cd-pipeline-operator-service-account",level:3},{value:"Argo CD Service Accounts",id:"argo-cd-service-accounts",level:3},{value:"Update Argo CD AppProject",id:"update-argo-cd-appproject",level:2},{value:"Configure IAM Roles Access to EKS Cluster",id:"configure-iam-roles-access-to-eks-cluster",level:2},{value:"CD Pipeline Operator Access Entry",id:"cd-pipeline-operator-access-entry",level:3},{value:"Argo CD Access Entry",id:"argo-cd-access-entry",level:3},{value:"Configure Capsule Tenant (Optional)",id:"configure-capsule-tenant-optional",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Articles",id:"related-articles",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:r,Head:i}=n;return r||A("Details",!0),i||A("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"deploy-application-in-remote-cluster-via-irsa",children:"Deploy Application In Remote Cluster via IRSA"})}),"\n",(0,t.jsx)(i,{children:(0,t.jsx)("link",{rel:"canonical",href:"https://docs.kuberocketci.io/docs/operator-guide/cd/deploy-application-in-remote-cluster-via-irsa"})}),"\n",(0,t.jsx)(n.p,{children:"KubeRocketCI enables secure deployment of applications to remote AWS EKS clusters using IAM Roles for Service Accounts (IRSA). This guide explains how to configure cross-account access between Kubernetes clusters, allowing applications to be deployed from one AWS account to another without storing long-term credentials. IRSA provides temporary, scoped credentials by allowing Kubernetes service accounts to assume specific IAM roles with precisely defined permissions, enhancing both security and operational efficiency when working with multi-account AWS environments."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before implementing IRSA for cross-account deployments, the following requirements must be met:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Configured two ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/accounts/latest/reference/getting-started.html",children:"AWS accounts"}),": Account A (where KubeRocketCI is deployed) and Account B (the target account for application deployment);"]}),"\n",(0,t.jsx)(n.li,{children:"Administrative access to both AWS accounts;"}),"\n",(0,t.jsxs)(n.li,{children:["Running ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html",children:"EKS cluster"})," in Account A with configured ",(0,t.jsx)(n.a,{href:"/docs/3.11/operator-guide/auth/configure-keycloak-oidc-eks",children:"OIDC Identity Provider"})," authentication;"]}),"\n",(0,t.jsxs)(n.li,{children:["Running ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html",children:"EKS cluster"})," in Account B as the target cluster for application deployment;"]}),"\n",(0,t.jsxs)(n.li,{children:["Installed and configured ",(0,t.jsx)(n.a,{href:"/docs/3.11/operator-guide/install-argocd",children:"Argo CD"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture-and-working-principles",children:"Architecture and Working Principles"}),"\n",(0,t.jsx)(n.p,{children:"KubeRocketCI uses IRSA to establish secure connections between AWS accounts without storing long-term credentials. The architecture follows these key principles:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Account Federation"})," - Kubernetes service accounts in Account A are federated with AWS IAM through OIDC"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Role Chaining"})," - IAM roles in Account A assume corresponding roles in Account B"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Temporary Credentials"})," - All access is provided through short-lived, automatically rotated tokens"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The cross-account deployment process involves two main components:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CD Pipeline Operator Flow:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"https://github.com/epam/edp-cd-pipeline-operator",children:"cd-pipeline-operator"})," in Account A uses a service account linked to the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineOperator"})," IAM role"]}),"\n",(0,t.jsxs)(n.li,{children:["When new environments or clusters are configured in KubeRocketCI, the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineOperator"})," role in Account A assumes the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineAgent"})," role in Account B"]}),"\n",(0,t.jsx)(n.li,{children:"The agent role creates the necessary Kubernetes resources (namespaces, service accounts, secrets) in the target cluster"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Argo CD Flow:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Argo CD controllers in Account A use service accounts linked to the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDMaster"})," IAM role"]}),"\n",(0,t.jsxs)(n.li,{children:["During deployment, this role assumes the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})," role in Account B"]}),"\n",(0,t.jsx)(n.li,{children:"The agent role accesses the target EKS cluster to deploy and manage applications"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The diagram below illustrates the IRSA access model for cross-account deployments:"}),"\n",(0,t.jsx)(n.mermaid,{value:'flowchart TD\n  subgraph subGraph0["AWS Account A"]\n    SA["cd-pipeline-operator"]\n    ROLE_A["IAM Role <br> CDPipelineOperator"]\n  end\n  subgraph subGraph1["AWS Account B"]\n    ROLE_B["IAM Role <br> CDPipelineAgent"]\n    RESOURCES["Kubernetes resources"]\n  end\n  subgraph subGraph2["CD Pipeline Operator Flow"]\n    subGraph0\n    subGraph1\n  end\n  subgraph subGraph3["AWS Account A"]\n    ARGOCD["Argo CD Controllers"]\n    ROLE_MASTER["IAM Role <br> ArgoCDMaster"]\n  end\n  subgraph subGraph4["AWS Account B"]\n    ROLE_AGENT["IAM Role <br> ArgoCDAgentAccess"]\n    APP_RESOURCES["Applications & Resources"]\n  end\n  subgraph subGraph5["Argo CD Flow"]\n    subGraph3\n    subGraph4\n  end\n  SA -- IRSA --\x3e ROLE_A\n  ROLE_A -- AssumeRole --\x3e ROLE_B\n  ROLE_B -- Create/Configure --\x3e RESOURCES\n  ARGOCD -- IRSA --\x3e ROLE_MASTER\n  ROLE_MASTER -- AssumeRole --\x3e ROLE_AGENT\n  ROLE_AGENT -- Deploy/Manage --\x3e APP_RESOURCES'}),"\n",(0,t.jsx)(n.h2,{id:"create-iam-roles",children:"Create IAM Roles"}),"\n",(0,t.jsx)(n.p,{children:"To enable cross-account deployments using IRSA, it is necessary to create specific IAM roles in both AWS accounts."}),"\n",(0,t.jsx)(n.p,{children:"There are two approaches to create the required IAM roles:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Using the AWS Management Console"}),": This approach is based on creating roles through the AWS web-based interface."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Using Terraform & AWS Management Console"}),": This hybrid approach is based on using the ",(0,t.jsx)(n.a,{href:"https://github.com/KubeRocketCI/terraform-aws-platform",children:"terraform-aws-platform"})," repository to create the required IAM roles in Account A, while using the AWS Management Console to create the roles in Account B."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-aws-management-console",children:"Using AWS Management Console"}),"\n",(0,t.jsx)(n.p,{children:"To create the required IAM roles in Account A using the AWS Management Console, follow the steps below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the AWS Management Console for Account A."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.strong,{children:"IAM"})," service and select ",(0,t.jsx)(n.strong,{children:"Roles"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineOperator"})," IAM role with the following settings:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Trust Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Sid": "",\n            "Effect": "Allow",\n            "Principal": {\n                "Federated": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:oidc-provider/oidc.eks.<AWS_REGION>.amazonaws.com/id/<OIDC_ID>"\n            },\n            "Action": "sts:AssumeRoleWithWebIdentity",\n            "Condition": {\n                "StringEquals": {\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/<OIDC_ID>:sub": [\n                        "system:serviceaccount:krci:edp-cd-pipeline-operator"\n                    ],\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/<OIDC_ID>:aud": "sts.amazonaws.com"\n                }\n            }\n        }\n    ]\n}\n'})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Permissions Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Action": "sts:AssumeRole",\n            "Effect": "Allow",\n            "Resource": "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_CDPipelineAgent"\n        }\n    ]\n}\n'})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDMaster"})," IAM role with the following settings:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Trust Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Sid": "",\n            "Effect": "Allow",\n            "Principal": {\n                "Federated": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:oidc-provider/oidc.eks.<AWS_REGION>.amazonaws.com/id/<OIDC_ID>"\n            },\n            "Action": "sts:AssumeRoleWithWebIdentity",\n            "Condition": {\n                "StringLike": {\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/<OIDC_ID>:sub": [\n                        "system:serviceaccount:argocd:argocd-application-controller",\n                        "system:serviceaccount:argocd:argocd-applicationset-controller",\n                        "system:serviceaccount:argocd:argocd-server"\n                    ],\n                    "oidc.eks.<AWS_REGION>.amazonaws.com/id/<OIDC_ID>:aud": "sts.amazonaws.com"\n                }\n            }\n        }\n    ]\n}\n'})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Permissions Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Action": "sts:AssumeRole",\n            "Effect": "Allow",\n            "Resource": [\n                "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_ArgoCDAgentAccess"\n            ]\n        }\n    ]\n}\n'})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To create the required IAM roles in Account B using the AWS Management Console, follow the steps below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the AWS Management Console for Account B."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.strong,{children:"IAM"})," service and select ",(0,t.jsx)(n.strong,{children:"Roles"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineAgent"})," IAM role with the following settings:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Trust Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n            },\n            "Action": "sts:AssumeRole"\n        }\n    ]\n}\n'})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})," IAM role with the following settings:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Trust Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n            },\n            "Action": "sts:AssumeRole"\n        }\n    ]\n}\n'})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-terraform-and-aws-management-console",children:"Using Terraform and AWS Management Console"}),"\n",(0,t.jsxs)(n.p,{children:["In case of using the ",(0,t.jsx)(n.a,{href:"https://github.com/KubeRocketCI/terraform-aws-platform",children:"terraform-aws-platform"})," repository for creating and managing AWS EKS clusters, the required IAM roles in Account A can be created using Terraform, while the roles in Account B can be created using the AWS Management Console."]}),"\n",(0,t.jsx)(n.p,{children:"To create the required IAM roles in Account A using Terraform, follow the steps below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Clone the forked ",(0,t.jsx)(n.a,{href:"https://github.com/KubeRocketCI/terraform-aws-platform",children:"terraform-aws-platform"})," repository."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.code,{children:"eks"})," directory."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"terraform.tfvars"})," configuration file by specifying the following variables:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",metastring:'title="terraform.tfvars"',children:'create_cd_pipeline_operator_irsa = true\ncreate_argocd_irsa               = true\n\ncd_pipeline_operator_agent_role_arn = "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_<ClusterName>_CDPipelineAgent"\nargocd_agent_role_arn               = "arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_<ClusterName>_ArgoCDAgentAccess"\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the following commands to create the IAM roles:"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["It is highly recommended to run the ",(0,t.jsx)(n.code,{children:"terraform plan"})," command before applying the changes to check the resources that will be created or modified."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"terraform init\nterraform apply -var-file=./template.tfvars\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To create the required IAM roles in Account B using the AWS Management Console, follow the steps below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the AWS Management Console for Account B."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.strong,{children:"IAM"})," service and select ",(0,t.jsx)(n.strong,{children:"Roles"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineAgent"})," IAM role with the following settings:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Trust Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n            },\n            "Action": "sts:AssumeRole"\n        }\n    ]\n}\n'})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})," IAM role with the following settings:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Trust Policy"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Principal": {\n                "AWS": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n            },\n            "Action": "sts:AssumeRole"\n        }\n    ]\n}\n'})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"annotate-service-accounts",children:"Annotate Service Accounts"}),"\n",(0,t.jsx)(n.p,{children:"To enable the cross-account access for the cd-pipeline-operator and Argo CD, it is necessary to annotate the Kubernetes service accounts in the AWS Account A with the corresponding IAM role ARNs. This allows the service accounts to assume the roles and access resources in the target AWS Account B."}),"\n",(0,t.jsx)(n.h3,{id:"cd-pipeline-operator-service-account",children:"CD Pipeline Operator Service Account"}),"\n",(0,t.jsxs)(n.p,{children:["On the AWS Account A, where the KubeRocketCI is deployed, annotate the ",(0,t.jsx)(n.code,{children:"edp-cd-pipeline-operator"})," service account with the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineOperator"})," IAM role ARN."]}),"\n",(0,t.jsx)(n.p,{children:"There are several ways to annotate the service account:"}),"\n",(0,t.jsxs)(c.A,{defaultValue:"values",values:[{label:"Values.yaml",value:"values"},{label:"CLI",value:"cli"},{label:"Manifests",value:"manifests"}],children:[(0,t.jsxs)(o.A,{value:"values",children:[(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"cd-pipeline-operator"})," configuration in ",(0,t.jsx)(n.a,{href:"https://github.com/epam/edp-install/blob/master/deploy-templates/values.yaml",children:"edp-install"})," repository to automatically add annotations to service account:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="deploy-templates/values.yaml"',children:'cd-pipeline-operator:\n  serviceAccount:\n    annotations:\n      eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n'})})]}),(0,t.jsxs)(o.A,{value:"cli",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: edp-cd-pipeline-operator"',children:'kubectl patch serviceaccount edp-cd-pipeline-operator -n krci \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"}}}\'\n'})}),(0,t.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding deployments to ensure new pods are created with the updated IAM roles configuration. Use the following command:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl rollout restart deployment cd-pipeline-operator -n krci\n"})})]}),(0,t.jsxs)(o.A,{value:"manifests",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="ServiceAccount: edp-cd-pipeline-operator"',children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_CDPipelineOperator"\n  name: edp-cd-pipeline-operator\n  namespace: krci\n'})}),(0,t.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding deployments to ensure new pods are created with the updated IAM roles configuration. Use the following command:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl rollout restart deployment cd-pipeline-operator -n krci\n"})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"argo-cd-service-accounts",children:"Argo CD Service Accounts"}),"\n",(0,t.jsxs)(n.p,{children:["On the AWS Account A, where the Argo CD is deployed, annotate the ",(0,t.jsx)(n.code,{children:"argocd-application-controller"}),", ",(0,t.jsx)(n.code,{children:"argocd-applicationset-controller"}),", and ",(0,t.jsx)(n.code,{children:"argocd-server"})," service accounts with the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDMaster"})," IAM role ARN."]}),"\n",(0,t.jsx)(n.p,{children:"There are several ways to annotate the service accounts:"}),"\n",(0,t.jsxs)(c.A,{defaultValue:"values",values:[{label:"Values.yaml",value:"values"},{label:"CLI",value:"cli"},{label:"Manifests",value:"manifests"}],children:[(0,t.jsxs)(o.A,{value:"values",children:[(0,t.jsxs)(n.p,{children:["Update the Argo CD configuration in ",(0,t.jsx)(n.a,{href:"https://github.com/epam/edp-cluster-add-ons/blob/main/clusters/core/addons/argo-cd/values.yaml",children:"Add-Ons"})," repository to automatically add annotations to service accounts:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="clusters/core/addons/argo-cd/values.yaml"',children:'argo-cd:\n  controller:\n    serviceAccount:\n      # -- Annotations applied to created service account\n      annotations:\n        eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n\n  server:\n    serviceAccount:\n      # -- Annotations applied to created service account\n      annotations:\n        eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n\n  applicationSet:\n    serviceAccount:\n      # -- Annotations applied to created service account\n      annotations:\n        eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n'})})]}),(0,t.jsxs)(o.A,{value:"cli",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-application-controller"',children:'kubectl patch serviceaccount argocd-application-controller -n argocd \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"}}}\'\n'})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-applicationset-controller"',children:'kubectl patch serviceaccount argocd-applicationset-controller -n argocd \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"}}}\'\n'})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="ServiceAccount: argocd-server"',children:'kubectl patch serviceaccount argocd-server -n argocd \\\n  -p \'{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"}}}\'\n'})}),(0,t.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding workloads to ensure new pods are created with the updated IAM roles configuration. To do this, use the following commands:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl delete pod -l app.kubernetes.io/name=argocd-application-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-applicationset-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-server -n argocd\n"})})]}),(0,t.jsxs)(o.A,{value:"manifests",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="ServiceAccount: argocd service accounts"',children:'apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n  name: argocd-application-controller\n  namespace: argocd\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n  name: argocd-applicationset-controller\n  namespace: argocd\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: "arn:aws:iam::<AWS_ACCOUNT_A_ID>:role/AWSIRSA_{cluster_name}_ArgoCDMaster"\n  name: argocd-server\n  namespace: argocd\n'})}),(0,t.jsx)(n.p,{children:"After applying annotations to service accounts, it is necessary to restart the corresponding workloads to ensure new pods are created with the updated IAM roles configuration. To do this, use the following commands:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl delete pod -l app.kubernetes.io/name=argocd-application-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-applicationset-controller -n argocd\n\nkubectl delete pod -l app.kubernetes.io/name=argocd-server -n argocd\n"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"update-argo-cd-appproject",children:"Update Argo CD AppProject"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"API server endpoint can be found in the EKS cluster details in the AWS Management Console."})}),"\n",(0,t.jsxs)(n.p,{children:["To allow Argo CD to deploy applications in the target cluster in Account B, it is necessary to update the ",(0,t.jsx)(n.strong,{children:"AppProject"})," configuration to include the target cluster as a destination."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: krci\n  namespace: argocd\nspec:\n  destinations:\n    - namespace: krci-*\n      server: https://<OIDC_ID>.gr7.<AWS_REGION_ACCOUNT_B>.eks.amazonaws.com\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configure-iam-roles-access-to-eks-cluster",children:"Configure IAM Roles Access to EKS Cluster"}),"\n",(0,t.jsxs)(n.p,{children:["To allow the IAM roles created in Account B to access the EKS cluster, it is necessary to configure the access permissions for the roles in the cluster. This can be done by creating the ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/eks/latest/userguide/eks-access-entries.html",children:"Access Entry"})," objects for the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineAgent"})," and ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})," IAM roles."]}),"\n",(0,t.jsx)(n.p,{children:"To configure the access permissions for the IAM roles for the EKS cluster in Account B, follow the steps below:"}),"\n",(0,t.jsx)(n.h3,{id:"cd-pipeline-operator-access-entry",children:"CD Pipeline Operator Access Entry"}),"\n",(0,t.jsxs)(n.p,{children:["To create the Access Entry for the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_CDPipelineAgent"})," IAM role, follow the steps below:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the AWS Management Console for Account B."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.strong,{children:"EKS"})," service and select the target cluster."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.strong,{children:"Access"})," tab, click on ",(0,t.jsx)(n.strong,{children:"Create access entry"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Create Access Entry",src:s(67301).A+"",width:"3334",height:"1668"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.strong,{children:"Configure IAM access entry"})," page, specify the following settings:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IAM principal ARN"}),": ",(0,t.jsx)(n.code,{children:"arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_CDPipelineAgent"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"Standard"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kubernetes groups"}),": ",(0,t.jsx)(n.code,{children:"cd-pipeline-operator"})," (required if Capsule Tenant is used)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Configure IAM Access Entry",src:s(72613).A+"",width:"3364",height:"1670"})}),"\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"Next"})," to proceed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.strong,{children:"Add access policy"})," page, select the ",(0,t.jsx)(n.strong,{children:"AmazonEKSClusterAdminPolicy"})," policy and click ",(0,t.jsx)(n.strong,{children:"Add policy"})," button."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If Capsule Tenant is used, it is not necessary to add the ",(0,t.jsx)(n.code,{children:"AmazonEKSClusterAdminPolicy"})," policy, as the access will be managed by Capsule."]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Add Access Policy",src:s(74014).A+"",width:"3364",height:"1670"})}),"\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"Next"})," to proceed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.strong,{children:"Review and create"})," page, review the settings and click ",(0,t.jsx)(n.strong,{children:"Create access entry"})," to create the Access Entry."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"argo-cd-access-entry",children:"Argo CD Access Entry"}),"\n",(0,t.jsxs)(n.p,{children:["To create the Access Entry for the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})," IAM role, follow the steps below:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the AWS Management Console for Account B."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to the ",(0,t.jsx)(n.strong,{children:"EKS"})," service and select the target cluster."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.strong,{children:"Access"})," tab, click on ",(0,t.jsx)(n.strong,{children:"Create access entry"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Create Access Entry",src:s(67301).A+"",width:"3334",height:"1668"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.strong,{children:"Configure IAM access entry"})," page, specify the following settings:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IAM principal ARN"}),": ",(0,t.jsx)(n.code,{children:"arn:aws:iam::<AWS_ACCOUNT_B_ID>:role/AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": ",(0,t.jsx)(n.code,{children:"Standard"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Configure IAM Access Entry",src:s(9655).A+"",width:"3364",height:"1670"})}),"\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"Next"})," to proceed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.strong,{children:"Add access policy"})," page, select the ",(0,t.jsx)(n.strong,{children:"AmazonEKSClusterAdminPolicy"})," policy and click ",(0,t.jsx)(n.strong,{children:"Add policy"})," button."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Add Access Policy",src:s(74014).A+"",width:"3364",height:"1670"})}),"\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"Next"})," to proceed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.strong,{children:"Review and create"})," page, review the settings and click ",(0,t.jsx)(n.strong,{children:"Create access entry"})," to create the Access Entry."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configure-capsule-tenant-optional",children:"Configure Capsule Tenant (Optional)"}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.a,{href:"https://projectcapsule.dev/",children:"Capsule"})," is used for multi-tenancy in the EKS cluster in Account B, it is necessary to configure the Capsule Tenant for the ",(0,t.jsx)(n.code,{children:"cd-pipeline-operator"})," group. This allows the ",(0,t.jsx)(n.code,{children:"AWSIRSA_{cluster_name}_ArgoCDAgentAccess"})," IAM role to have the necessary permissions to manage resources within the Capsule Tenant."]}),"\n",(0,t.jsxs)(n.p,{children:["To configure the Capsule Tenant for the ",(0,t.jsx)(n.code,{children:"cd-pipeline-operator"})," group, align the following Capsule resources in the EKS cluster in Account B:"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Capsule Configuration"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: capsule.clastix.io/v1beta2\nkind: CapsuleConfiguration\nmetadata:\n  name: default\nspec:\n  userGroups:\n    - capsule.clastix.io\n    - cd-pipeline-operator\n"})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Capsule Tenant"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: capsule.clastix.io/v1beta2\nkind: Tenant\nmetadata:\n  name: krci\nspec:\n  owners:\n    - clusterRoles:\n        - admin\n        - capsule-namespace-deleter\n      kind: Group\n      name: cd-pipeline-operator\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.p,{children:["After completing the IRSA configuration on both AWS accounts, it is possible to deploy applications to the remote EKS cluster in Account B using KubeRocketCI. To proceed with the adding the remote cluster and deploying applications, refer to the ",(0,t.jsx)(n.a,{href:"/docs/3.11/user-guide/add-cluster",children:"Add Cluster"})," guide."]}),"\n",(0,t.jsx)(n.h2,{id:"related-articles",children:"Related Articles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/3.11/operator-guide/cd/argocd-integration",children:"Argo CD Integration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/3.11/user-guide/add-cluster",children:"Add Cluster"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/3.11/user-guide/add-application",children:"Add Application"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/3.11/user-guide/add-cd-pipeline",children:"Add CD Pipeline"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function A(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);